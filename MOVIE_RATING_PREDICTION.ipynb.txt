{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fffqCUaiLhmZ",
        "outputId": "5e73150f-4dab-43bd-cd59-1bedb153916a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                 Name    Year Duration            Genre  \\\n",
            "0                                         NaN      NaN            Drama   \n",
            "1  #Gadhvi (He thought he was Gandhi)  (2019)  109 min            Drama   \n",
            "2                         #Homecoming  (2021)   90 min   Drama, Musical   \n",
            "3                             #Yaaram  (2019)  110 min  Comedy, Romance   \n",
            "4                   ...And Once Again  (2010)  105 min            Drama   \n",
            "\n",
            "   Rating Votes            Director       Actor 1             Actor 2  \\\n",
            "0     NaN   NaN       J.S. Randhawa      Manmauji              Birbal   \n",
            "1     7.0     8       Gaurav Bakshi  Rasika Dugal      Vivek Ghamande   \n",
            "2     NaN   NaN  Soumyajit Majumdar  Sayani Gupta   Plabita Borthakur   \n",
            "3     4.4    35          Ovais Khan       Prateik          Ishita Raj   \n",
            "4     NaN   NaN        Amol Palekar  Rajat Kapoor  Rituparna Sengupta   \n",
            "\n",
            "           Actor 3  \n",
            "0  Rajendra Bhatia  \n",
            "1    Arvind Jangid  \n",
            "2       Roy Angana  \n",
            "3  Siddhant Kapoor  \n",
            "4      Antara Mali  \n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 15509 entries, 0 to 15508\n",
            "Data columns (total 10 columns):\n",
            " #   Column    Non-Null Count  Dtype  \n",
            "---  ------    --------------  -----  \n",
            " 0   Name      15509 non-null  object \n",
            " 1   Year      14981 non-null  object \n",
            " 2   Duration  7240 non-null   object \n",
            " 3   Genre     13632 non-null  object \n",
            " 4   Rating    7919 non-null   float64\n",
            " 5   Votes     7920 non-null   object \n",
            " 6   Director  14984 non-null  object \n",
            " 7   Actor 1   13892 non-null  object \n",
            " 8   Actor 2   13125 non-null  object \n",
            " 9   Actor 3   12365 non-null  object \n",
            "dtypes: float64(1), object(9)\n",
            "memory usage: 1.2+ MB\n",
            "None\n",
            "            Rating\n",
            "count  7919.000000\n",
            "mean      5.841621\n",
            "std       1.381777\n",
            "min       1.100000\n",
            "25%       4.900000\n",
            "50%       6.000000\n",
            "75%       6.800000\n",
            "max      10.000000\n",
            "Remaining non-numeric columns: Index([], dtype='object')\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/impute/_base.py:598: UserWarning: Skipping features without any observed values: ['Year']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of X_imputed: (7919, 8993)\n",
            "Original number of columns in X: 8994\n",
            "Warning: The number of columns after imputation does not match the original columns.\n",
            "Mean Squared Error: 1.5227435117029856e+16\n",
            "R-squared: -8190557468669242.0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.impute import SimpleImputer\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_csv('mov.csv', encoding='ISO-8859-1')\n",
        "\n",
        "# Step 1: Explore the dataset\n",
        "print(df.head())  # View the first few rows of the dataset\n",
        "print(df.info())  # Check column data types and for missing values\n",
        "print(df.describe())  # Statistical summary of numerical features\n",
        "\n",
        "# Step 2: Drop rows with missing 'Rating' values (since it's the target variable)\n",
        "df = df.dropna(subset=['Rating'])\n",
        "\n",
        "# Step 3: Keep only relevant columns\n",
        "df = df[['Name', 'Year', 'Genre', 'Director', 'Actor 1', 'Actor 2', 'Duration', 'Votes', 'Rating']]\n",
        "\n",
        "# Step 4: Convert 'Year', 'Votes', and 'Rating' to numeric\n",
        "df['Year'] = pd.to_numeric(df['Year'], errors='coerce')\n",
        "df['Votes'] = pd.to_numeric(df['Votes'], errors='coerce')\n",
        "df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce')\n",
        "\n",
        "# Step 5: Handle 'Duration'\n",
        "df['Duration'] = df['Duration'].astype(str)\n",
        "df['Duration'] = df['Duration'].str.replace(' min', '', regex=False)  # Remove ' min' text\n",
        "df['Duration'] = pd.to_numeric(df['Duration'], errors='coerce')\n",
        "\n",
        "# Step 6: One-hot encode categorical variables ('Genre', 'Director', 'Actor 1', 'Actor 2')\n",
        "df = pd.get_dummies(df, columns=['Genre', 'Director', 'Actor 1', 'Actor 2'], drop_first=True)\n",
        "\n",
        "# Step 7: Drop any remaining non-numeric columns that are not relevant (like 'Name')\n",
        "df = df.drop('Name', axis=1)\n",
        "\n",
        "# Step 8: Check for any remaining non-numeric columns\n",
        "print(\"Remaining non-numeric columns:\", df.select_dtypes(include=['object']).columns)\n",
        "\n",
        "# Step 9: Handle missing values using SimpleImputer\n",
        "imputer = SimpleImputer(strategy='mean')  # Impute missing values with the mean\n",
        "X = df.drop('Rating', axis=1)  # Features\n",
        "y = df['Rating']  # Target\n",
        "\n",
        "# Step 10: Perform imputation\n",
        "X_imputed = imputer.fit_transform(X)  # Impute missing values\n",
        "\n",
        "# Step 11: Convert back to DataFrame without reassigning the column names yet\n",
        "X_imputed = pd.DataFrame(X_imputed)\n",
        "\n",
        "# Step 12: Check the shapes before assigning column names\n",
        "print(\"Shape of X_imputed:\", X_imputed.shape)\n",
        "print(\"Original number of columns in X:\", X.shape[1])\n",
        "\n",
        "# Step 13: Ensure we assign the correct number of column names\n",
        "if X_imputed.shape[1] == X.shape[1]:\n",
        "    X_imputed.columns = X.columns  # Assign column names if shapes match\n",
        "else:\n",
        "    print(\"Warning: The number of columns after imputation does not match the original columns.\")\n",
        "\n",
        "# Step 14: Split the data into training and testing sets (80% training, 20% testing)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 15: Initialize and train the Linear Regression model\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)  # Train the model on the training data\n",
        "\n",
        "# Step 16: Make predictions on the test set\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Step 17: Evaluate the model's performance\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "# Step 18: Output the results\n",
        "print(\"Mean Squared Error:\", mse)  # Lower MSE indicates better performance\n",
        "print(\"R-squared:\", r2)  # R-squared closer to 1 means a better model fit\n"
      ]
    }
  ]
}